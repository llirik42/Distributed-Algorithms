syntax = "proto3";

package raft_protocol;
option go_package = "./raft_protocol";

message Value {
  message Null {}

  message Boolean {
    bool value = 1;
  }

  message Number {
    double value = 1;
  }

  message String {
    string value = 1;
  }

  message Array {
    repeated Value value = 1;
  }

  message Object {
    map<string, Value> value = 1;
  }

  oneof Type {
    String string = 1;
    Boolean boolean = 2;
    Number number = 3;
    Array array = 4;
    Object object = 5;
    Null null = 6;
  }
}

message Command {
  message Set {
    string key = 1;
    Value value = 2;
  }

  message Delete {
    string key = 1;
  }

  oneof Type {
    Set set = 1;
    Delete delete = 2;
  }
}

message LogEntry {
  uint32 term = 2;
  Command command = 3;
}

message RequestVoteRequest {
  uint32 term = 1;
  string candidateId = 2;
  uint64 lastLogIndex = 3;
  uint32 lastLogTerm = 4;
}

message RequestVoteResponse {
  uint32 term = 1;
  bool voteGranted = 2;
}

message AppendEntriesRequest {
  uint32 term = 1;
  string leaderId = 2;
  uint64 prevLogIndex = 3;
  uint32 prevLogTerm = 4;
  repeated LogEntry entries = 5;
  uint64 leaderCommit = 6;
}

message AppendEntriesResponse {
  uint32 term = 1;
  bool success = 2;

  // Optimization
  uint64 conflictIndex = 3;
  uint32 conflictTerm = 4;
}

service RaftService {
  rpc RequestForVote(RequestVoteRequest) returns (RequestVoteResponse) {}

  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
}
